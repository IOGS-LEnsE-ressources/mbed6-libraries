<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\line_sensor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\line_sensor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Thu Feb 13 14:23:54 2025
<BR><P>
<H3>Maximum Stack Usage =       1064 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lp_ticker_init &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[e6]">hal_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">mbed_assert_internal</a><BR>
 <LI><a href="#[9c]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">mbed_assert_internal</a><BR>
 <LI><a href="#[c3]">do_serial_init_once()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">mbed_assert_internal</a><BR>
 <LI><a href="#[8a]">_sys_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d4]">mbed::minimal_console_putc(int)</a><BR>
 <LI><a href="#[10f]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">mbed_error</a><BR>
 <LI><a href="#[bd]">Set_GPIO_Clock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ba]">error</a><BR>
 <LI><a href="#[f1]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">mbed_assert_internal</a><BR>
 <LI><a href="#[ba]">error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e9]">print_error_report</a><BR>
 <LI><a href="#[ea]">mbed_error_vprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[eb]">mbed_error_puts</a><BR>
 <LI><a href="#[110]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">mbed_error</a><BR>
 <LI><a href="#[111]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">mbed_assert_internal</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from .\build\can_api.o(.text.CAN1_RX0_IRQHandler) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from .\build\can_api.o(.text.CAN1_SCE_IRQHandler) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from .\build\can_api.o(.text.CAN1_TX_IRQHandler) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">COMP_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">DFSDM1_FLT0_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[48]">DFSDM1_FLT1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">DFSDM1_FLT2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">DFSDM1_FLT3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel6_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel7_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">LCD_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">LPTIM1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">LPTIM2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[68]">LPTIM_IRQHandler</a> from .\build\lp_ticker.o(.text.LPTIM_IRQHandler) referenced 2 times from .\build\lp_ticker.o(.text.lp_ticker_init)
 <LI><a href="#[50]">LPUART1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">QUADSPI_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">SAI1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">SAI2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">SWPMI1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from .\build\system_stm32l4xx.o(.text.SystemInit) referenced from .\build\startup_stm32l476xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">TSC_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from .\build\startup_stm32l476xx.o(.text) referenced from .\build\startup_stm32l476xx.o(RESET)
 <LI><a href="#[7d]">_GLOBAL__sub_I_main.cpp</a> from .\build\main.o(.text._GLOBAL__sub_I_main.cpp) referenced from .\build\main.o(.init_array)
 <LI><a href="#[5e]">mbed::TimerEvent::irq(unsigned int)</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj) referenced 2 times from .\build\timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t)
 <LI><a href="#[5f]">mbed::InterruptIn::_irq_handler(unsigned int, gpio_irq_event)</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event) referenced 2 times from .\build\interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName)
 <LI><a href="#[6b]">mbed::InterruptIn::~InterruptIn__deallocating()</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptInD0Ev) referenced from .\build\interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
 <LI><a href="#[6a]">mbed::InterruptIn::~InterruptIn__sub_object()</a> from .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev) referenced from .\build\interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
 <LI><a href="#[6c]">mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()</a> from .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE7handlerEv) referenced from .\build\systimer.o(.rodata._ZTVN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEE)
 <LI><a href="#[69]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[5d]">__main</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry.o)(.ARM.Collect$$$$00000000) referenced from .\build\startup_stm32l476xx.o(.text)
 <LI><a href="#[7b]">block_us_ticker_free</a> from .\build\mbed_us_ticker_api.o(.text.block_us_ticker_free) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[60]">gpio_irq0</a> from .\build\gpio_irq_api.o(.text.gpio_irq0) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[61]">gpio_irq1</a> from .\build\gpio_irq_api.o(.text.gpio_irq1) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[63]">gpio_irq2</a> from .\build\gpio_irq_api.o(.text.gpio_irq2) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[64]">gpio_irq3</a> from .\build\gpio_irq_api.o(.text.gpio_irq3) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[62]">gpio_irq4</a> from .\build\gpio_irq_api.o(.text.gpio_irq4) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[65]">gpio_irq5</a> from .\build\gpio_irq_api.o(.text.gpio_irq5) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[66]">gpio_irq6</a> from .\build\gpio_irq_api.o(.text.gpio_irq6) referenced 2 times from .\build\gpio_irq_api.o(.text.gpio_irq_init)
 <LI><a href="#[70]">lp_ticker_clear_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_clear_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6f]">lp_ticker_disable_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_disable_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[72]">lp_ticker_fire_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_fire_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[73]">lp_ticker_free</a> from .\build\lp_ticker.o(.text.lp_ticker_free) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[74]">lp_ticker_get_info</a> from .\build\lp_ticker.o(.text.lp_ticker_get_info) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6d]">lp_ticker_init</a> from .\build\lp_ticker.o(.text.lp_ticker_init) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6e]">lp_ticker_read</a> from .\build\lp_ticker.o(.text.lp_ticker_read) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[71]">lp_ticker_set_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_set_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[5b]">main</a> from .\build\mbed_sdk_boot.o(.text.$Sub$$main) referenced from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry9a.o)(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7e]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(.text.ticker_irq_handler) referenced 2 times from .\build\mbed_lp_ticker_api.o(.data.irq_handler)
 <LI><a href="#[67]">timer_irq_handler</a> from .\build\us_ticker.o(.text.timer_irq_handler) referenced 2 times from .\build\us_ticker.o(.text.init_32bit_timer)
 <LI><a href="#[78]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[77]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[7a]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[7c]">us_ticker_get_info</a> from .\build\us_ticker.o(.text.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[75]">us_ticker_init</a> from .\build\us_ticker.o(.text.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[76]">us_ticker_read</a> from .\build\us_ticker.o(.text.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[79]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry.o)(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry4.o)(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[81]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry5.o)(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry5.o)(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>__use_full_stdio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry6b.o)(.ARM.Collect$$$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __use_full_stdio &rArr; _initio &rArr; _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[87]"></a>__main_after_initio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry6b.o)(.ARM.Collect$$$$00000006))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[119]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry7b.o)(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[85]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry8a.o)(.ARM.Collect$$$$00000009))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[11a]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry8b.o)(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[11b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry9a.o)(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[11c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry10a.o)(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(entry11a.o)(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>_initio</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(initio_oe.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_initio
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__use_full_stdio
</UL>

<P><STRONG><a name="[88]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(puts_e.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = puts &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[89]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(fputc_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(uldiv.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memcpya.o)(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memcpya.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memcpya.o)(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_MSI
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e3]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(strcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[96]"></a>$Super$$__cpp_initialize__aeabi_</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(cpp_init.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = $Super$$__cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(llshl.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[123]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(llushr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[124]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(init.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[125]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(init.o)(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__2printf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$__2printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __2printf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[94]"></a>__2vfprintf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$__2vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __2vfprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>

<P><STRONG><a name="[80]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_sdk_boot.o(.text.$Sub$$__cpp_initialize__aeabi_))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init
</UL>

<P><STRONG><a name="[126]"></a>_printf_d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_d), UNUSED)

<P><STRONG><a name="[127]"></a>_printf_int_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_int_dec), UNUSED)

<P><STRONG><a name="[128]"></a>_printf_percent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_percent), UNUSED)

<P><STRONG><a name="[129]"></a>_printf_u</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_u), UNUSED)

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, .\build\mbed_sdk_boot.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = main &rArr; $Super$$main &rArr; thread_sleep_for &rArr; mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$__cpp_initialize__aeabi_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[99]"></a>vsnprintf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\mbed_printf_wrapper.o(.text.$Sub$$vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vsnprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\can_api.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\can_api.o(.text.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\can_api.o(.text.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_TX_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>HAL_GetTick</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, .\build\hal_tick_overrides.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[9e]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_InitTick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\hal_tick_overrides.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[101]"></a>HAL_LPTIM_Counter_Start</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal_lptim.o(.text.HAL_LPTIM_Counter_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LPTIM_Counter_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_LPTIM_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, .\build\stm32l4xx_hal_lptim.o(.text.HAL_LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_LPTIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_LPTIM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_lptim.o(.text.HAL_LPTIM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[a6]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[be]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableVddIO2))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>

<P><STRONG><a name="[ad]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[10d]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableLowPowerRunMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_MSI
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 944 bytes, Stack size 40 bytes, .\build\stm32l4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[ab]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, .\build\stm32l4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_MSI
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ac]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1862 bytes, Stack size 40 bytes, .\build\stm32l4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_MSI
</UL>

<P><STRONG><a name="[ae]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal_tim.o(.text.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_tim.o(.text.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal_tim.o(.text.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_32bit_timer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UARTEx_DisableClockStopMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableClockStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UARTEx_DisableStopMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[b2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b8]"></a>SetSysClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\system_clock.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SetSysClock &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_MSI
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[b9]"></a>SetSysClock_PLL_MSI</STRONG> (Thumb, 126 bytes, Stack size 112 bytes, .\build\system_clock.o(.text.SetSysClock_PLL_MSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SetSysClock_PLL_MSI &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; init_32bit_timer &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[bd]"></a>Set_GPIO_Clock</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableVddIO2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[10c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, .\build\system_stm32l4xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, .\build\system_stm32l4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, .\build\stm32l4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[10e]"></a>TargetBSP_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_overrides.o(.text.TargetBSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[b4]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, .\build\stm32l4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b5]"></a>UART_CheckIdleState</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, .\build\stm32l4xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_CheckIdleState &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b3]"></a>UART_SetConfig</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, .\build\stm32l4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[c7]"></a>mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang;&rang;&rang;)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent15insert_absoluteENSt3__26chrono10time_pointINS_15TickerDataClockENS2_8durationIxNS1_5ratioILx1ELx1000000EEEEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang;&rang;&rang;) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()
</UL>

<P><STRONG><a name="[5e]"></a>mbed::TimerEvent::irq(unsigned int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t)
</UL>
<P><STRONG><a name="[c9]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
</UL>

<P><STRONG><a name="[cb]"></a>mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)
</UL>

<P><STRONG><a name="[5f]"></a>mbed::InterruptIn::_irq_handler(unsigned int, gpio_irq_event)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event))
<BR>[Address Reference Count : 1]<UL><LI> interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName)
</UL>
<P><STRONG><a name="[c2]"></a>mbed::InterruptIn::InterruptIn(PinName)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[12a]"></a>mbed::InterruptIn::InterruptIn__sub_object(PinName)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInC2E7PinName), UNUSED)

<P><STRONG><a name="[6b]"></a>mbed::InterruptIn::~InterruptIn__deallocating()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::InterruptIn::~InterruptIn__deallocating() &rArr; gpio_irq_free &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[d1]"></a>mbed::InterruptIn::~InterruptIn()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
</UL>

<P><STRONG><a name="[6a]"></a>mbed::InterruptIn::~InterruptIn__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptInD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::InterruptIn::~InterruptIn__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interruptin.o(.rodata._ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[102]"></a>mbed::InterruptIn::operator int()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\interruptin.o(.text._ZN4mbed11InterruptIncviEv))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d2]"></a>mbed::CriticalSectionLock::CriticalSectionLock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CriticalSectionLock::CriticalSectionLock() &rArr; core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[12b]"></a>mbed::CriticalSectionLock::CriticalSectionLock__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockC2Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>mbed::CriticalSectionLock::~CriticalSectionLock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CriticalSectionLock::~CriticalSectionLock() &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[12c]"></a>mbed::CriticalSectionLock::~CriticalSectionLock__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockD2Ev), UNUSED)

<P><STRONG><a name="[d4]"></a>mbed::minimal_console_putc(int)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN4mbed20minimal_console_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_serial_init_once()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[d6]"></a>void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18do_sleep_operationINS0_18timed_predicate_opEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[d9]"></a>mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal34do_timed_sleep_relative_or_foreverENSt3__26chrono8durationIjNS1_5ratioILx1ELx1000EEEEEPFbPvES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_sleep_for
</UL>

<P><STRONG><a name="[dd]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE11cancel_wakeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake() &rArr; mbed::TimerEvent::remove() &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[d8]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE13set_wake_timeENS2_6chrono10time_pointIS5_NS6_8durationIyS4_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang;&rang;&rang;)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[dc]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE19update_and_get_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick() &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[6c]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang;&rang;&rang;) &rArr; ticker_insert_event_us &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang;&rang;&rang;)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.rodata._ZTVN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEE)
</UL>
<P><STRONG><a name="[db]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[12d]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer__sub_object(ticker_data_t const*)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEC2EPK13ticker_data_t), UNUSED)

<P><STRONG><a name="[d0]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator delete(void*, unsigned int) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn__deallocating()
</UL>

<P><STRONG><a name="[69]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[7f]"></a>__user_setup_stackheap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.__user_setup_stackheap), UNUSED, KEPT)

<P><STRONG><a name="[12e]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._mbed_user_setup_stackheap), UNUSED)

<P><STRONG><a name="[86]"></a>_sys_open</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[117]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[8a]"></a>_sys_write</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::minimal_console_putc(int)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[104]"></a>_wait_us_ticks</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\mbed_wait_api_no_rtos.o(.text._wait_us_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[e2]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_w.l(abort_message.cpp.o)(.text.abort_message))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[10a]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[df]"></a>core_util_atomic_load_u64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_load_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[9c]"></a>core_util_critical_section_enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_free
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>

<P><STRONG><a name="[9d]"></a>core_util_critical_section_exit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_free
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>

<P><STRONG><a name="[109]"></a>core_util_is_isr_active</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[ba]"></a>error</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, .\build\mbed_error.o(.text.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_hook
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[ed]"></a>exit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[da]"></a>get_lp_ticker_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(.text.get_lp_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[f2]"></a>gpio_dir</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[f0]"></a>gpio_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[ce]"></a>gpio_init_in</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[f4]"></a>gpio_init_out</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[cf]"></a>gpio_irq_free</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, .\build\gpio_irq_api.o(.text.gpio_irq_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq_free &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn__deallocating()
</UL>

<P><STRONG><a name="[cd]"></a>gpio_irq_init</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, .\build\gpio_irq_api.o(.text.gpio_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = gpio_irq_init &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[f3]"></a>gpio_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[e5]"></a>hal_critical_section_enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_enter))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[e6]"></a>hal_critical_section_exit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[f7]"></a>hal_sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\sleep.o(.text.hal_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[a2]"></a>init_32bit_timer</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, .\build\us_ticker.o(.text.init_32bit_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_32bit_timer &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[fa]"></a>init_uart</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_uart &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableStopMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableClockStopMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[70]"></a>lp_ticker_clear_interrupt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lp_ticker_clear_interrupt &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[6f]"></a>lp_ticker_disable_interrupt</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lp_ticker_disable_interrupt &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[72]"></a>lp_ticker_fire_interrupt</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_fire_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lp_ticker_fire_interrupt &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[73]"></a>lp_ticker_free</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lp_ticker_free &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[74]"></a>lp_ticker_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[6d]"></a>lp_ticker_init</STRONG> (Thumb, 424 bytes, Stack size 224 bytes, .\build\lp_ticker.o(.text.lp_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = lp_ticker_init &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Counter_Start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[b6]"></a>lp_ticker_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(.text.lp_ticker_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>lp_ticker_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_read))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[71]"></a>lp_ticker_set_interrupt</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, .\build\lp_ticker.o(.text.lp_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = lp_ticker_set_interrupt &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[98]"></a>$Super$$main</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, .\build\main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = $Super$$main &rArr; thread_sleep_for &rArr; mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_sleep_for
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::operator int()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>mbed_assert_internal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\mbed_assert.o(.text.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_serial_init_once()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[ef]"></a>mbed_die</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\mbed_board.o(.text.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed_die &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[100]"></a>mbed_error</STRONG> (Thumb, 464 bytes, Stack size 72 bytes, .\build\mbed_error.o(.text.mbed_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_tiny_compute_crc32
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_hook
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[e8]"></a>mbed_error_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_error_hook))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[106]"></a>mbed_error_printf</STRONG> (Thumb, 68 bytes, Stack size 160 bytes, .\build\mbed_board.o(.text.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[eb]"></a>mbed_error_puts</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\mbed_board.o(.text.mbed_error_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[ea]"></a>mbed_error_vprintf</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, .\build\mbed_board.o(.text.mbed_error_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = mbed_error_vprintf &rArr;  mbed_error_puts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[97]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_sdk_boot.o(.text.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>mbed_minimal_formatted_string</STRONG> (Thumb, 1428 bytes, Stack size 88 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2vfprintf
</UL>

<P><STRONG><a name="[95]"></a>mbed_sdk_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(.text.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetBSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>mbed_tiny_compute_crc32</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\mbedcrc.o(.text.mbed_tiny_compute_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_tiny_compute_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[f1]"></a>pin_function</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, .\build\pinmap.o(.text.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[f6]"></a>pin_mode</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, .\build\pinmap.o(.text.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_mode &rArr; Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[112]"></a>pinmap_find_function</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_function))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[10f]"></a>pinmap_merge</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[110]"></a>pinmap_peripheral</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[c6]"></a>serial_baud</STRONG> (Thumb, 140 bytes, Stack size 224 bytes, .\build\serial_api.o(.text.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = serial_baud &rArr; debug &rArr; __2vfprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_serial_init_once()
</UL>

<P><STRONG><a name="[111]"></a>serial_init</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, .\build\serial_api.o(.text.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + In Cycle
<LI>Call Chain = serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[c5]"></a>serial_init_direct</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\static_pinmap.o(.text.serial_init_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = serial_init_direct &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_serial_init_once()
</UL>

<P><STRONG><a name="[d5]"></a>serial_putc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\serial_device.o(.text.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::minimal_console_putc(int)
</UL>

<P><STRONG><a name="[114]"></a>serial_writable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[e0]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[d7]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[b7]"></a>sleep_manager_unlock_deep_sleep_internal</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_unlock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
</UL>

<P><STRONG><a name="[103]"></a>thread_sleep_for</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_thread.o(.text.thread_sleep_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = thread_sleep_for &rArr; mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;) &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_or_forever(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;, bool (*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c8]"></a>ticker_insert_event_us</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, .\build\mbed_ticker_api.o(.text.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ticker_insert_event_us &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[7e]"></a>ticker_irq_handler</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_lp_ticker_api.o(.data.irq_handler)
<LI> mbed_us_ticker_api.o(.data.irq_handler)
</UL>
<P><STRONG><a name="[de]"></a>ticker_read_us</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang;&rang;&rang;)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)
</UL>

<P><STRONG><a name="[ca]"></a>ticker_remove_event</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = ticker_remove_event &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[cc]"></a>ticker_set_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>

<P><STRONG><a name="[67]"></a>timer_irq_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.timer_irq_handler))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(.text.init_32bit_timer)
</UL>
<P><STRONG><a name="[78]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[77]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[7a]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[7c]"></a>us_ticker_get_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[75]"></a>us_ticker_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_init &rArr; HAL_TIM_OC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[116]"></a>us_ticker_irq_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.us_ticker_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[76]"></a>us_ticker_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_read))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[79]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[108]"></a>write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::minimal_console_putc(int)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(errno.o)(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[12f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(errno.o)(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[e1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(malloc2.o)(i.__free$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(handlers.o)(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(handlers.o)(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(handlers.o)(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ee]"></a>fflush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\mc_w.l(fflush_f.o)(i._fflush$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[9a]"></a>can_irq</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, .\build\can_api.o(.text.can_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>gpio_irq0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq0))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq0 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[61]"></a>gpio_irq1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq1))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq1 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[62]"></a>gpio_irq4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq4))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq4 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[63]"></a>gpio_irq2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq2))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq2 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[64]"></a>gpio_irq3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq3))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq3 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[65]"></a>gpio_irq5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq5))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq5 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[66]"></a>gpio_irq6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\gpio_irq_api.o(.text.gpio_irq6))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = gpio_irq6 &rArr; handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(.text.gpio_irq_init)
</UL>
<P><STRONG><a name="[f5]"></a>handle_interrupt_in</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, .\build\gpio_irq_api.o(.text.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = handle_interrupt_in &rArr; error &rArr;  print_error_report (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq6
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq5
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq3
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq0
</UL>

<P><STRONG><a name="[68]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, .\build\lp_ticker.o(.text.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = LPTIM_IRQHandler &rArr; lp_ticker_set_interrupt &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lp_ticker.o(.text.lp_ticker_init)
</UL>
<P><STRONG><a name="[e9]"></a>print_error_report</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, .\build\mbed_error.o(.text.print_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[ec]"></a>mbed_halt_system</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_halt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed_halt_system &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[107]"></a>system_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.system_reset))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[115]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reset
</UL>

<P><STRONG><a name="[10b]"></a>mbed_minimal_formatted_string_integer</STRONG> (Thumb, 552 bytes, Stack size 72 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[c3]"></a>do_serial_init_once()</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZL19do_serial_init_oncev))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::minimal_console_putc(int)
</UL>

<P><STRONG><a name="[fe]"></a>initialize</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = initialize &rArr; schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[ff]"></a>schedule_interrupt</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = schedule_interrupt &rArr; mbed_assert_internal &rArr; mbed_error &rArr; print_error_report &rArr; mbed_error_printf &rArr; mbed_error_puts &rArr; write &rArr; mbed::minimal_console_putc(int) &rArr; do_serial_init_once() &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>

<P><STRONG><a name="[7b]"></a>block_us_ticker_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.block_us_ticker_free))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[e7]"></a>debug</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, .\build\serial_api.o(.text.debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = debug &rArr; __2vfprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_integer &rArr; fputc &rArr; _sys_write &rArr;  mbed::minimal_console_putc(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[a9]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, .\build\stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLLSAI1_Config &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[aa]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, .\build\stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLLSAI2_Config &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
