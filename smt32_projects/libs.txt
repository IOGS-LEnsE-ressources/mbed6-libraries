Super question ğŸ‘Œ Câ€™est **lâ€™Ã©tape clÃ©** pour garder ton projet STM32CubeIDE propre tout en rÃ©utilisant ton code perso (librairies maison, drivers spÃ©cifiques, algos, etc.).

---

# ğŸ”¹ Ã‰tapes pour intÃ©grer une bibliothÃ¨que dans STM32CubeIDE

### 1. Organisation du projet

ğŸ‘‰ CrÃ©e un dossier dÃ©diÃ© Ã  tes libs, par exemple :

```
MyProject/
 â”œâ”€â”€ Core/
 â”œâ”€â”€ Drivers/
 â”œâ”€â”€ Middlewares/
 â”œâ”€â”€ Libs/         <-- tes bibliothÃ¨ques perso ici
 â”‚    â”œâ”€â”€ mylib.h
 â”‚    â”œâ”€â”€ mylib.c
 â”‚    â””â”€â”€ utils/
 â”‚         â”œâ”€â”€ utils.h
 â”‚         â””â”€â”€ utils.c
 â””â”€â”€ ...
```

Tu peux mettre ce dossier dans le projet, ou bien en dehors (et juste ajouter le chemin).

---

### 2. Ajouter le chemin des includes

* Dans **CubeIDE** :

  * Clique droit sur ton projet â†’ **Properties**
  * `C/C++ General â†’ Paths and Symbols`
  * Onglet **Includes** â†’ Ajoute `../Libs` (ou le chemin relatif vers ton dossier).

ğŸ‘‰ Tu peux aussi le faire par fichier `CMakeLists.txt` si tu passes par CMake, mais avec CubeIDE standard câ€™est Eclipse qui gÃ¨re.

---

### 3. Ajouter les fichiers source

Deux options :

#### âœ… Option 1 : copier directement dans le projet

* Place tes `.c` et `.h` dans `Libs/`
* Ajoute `Libs/*.c` Ã  la **build configuration** â†’ normalement CubeIDE les compile automatiquement si le dossier est dans lâ€™arborescence du projet.

#### âœ… Option 2 : garder tes libs en dehors du projet

* Dans `Properties â†’ C/C++ Build â†’ Settings â†’ Tool Settings â†’ MCU GCC Compiler â†’ Include paths` â†’ ajoute le chemin vers les headers.
* Dans `MCU GCC Linker â†’ Libraries` â†’ ajoute le chemin vers la lib compilÃ©e (`.a`) si tu veux distribuer une lib prÃ©compilÃ©e.

---

### 4. Utilisation dans le code

Une fois configurÃ©, tu peux inclure tes headers normalement :

```c
#include "mylib.h"
#include "utils/utils.h"
```

---

### 5. Bonnes pratiques

* **Ne mets pas tes libs dans Core/** â†’ ce dossier est rÃ©gÃ©nÃ©rÃ© par CubeMX et risque dâ€™Ã©craser tes fichiers.
* Si ta lib est utilisÃ©e dans plusieurs projets : crÃ©e un dÃ©pÃ´t Git sÃ©parÃ© et ajoute-le comme **submodule**.
* Si tu distribues une lib compilÃ©e (`.a`), garde aussi les headers `.h` dans `Libs/include/`.

---

ğŸ‘‰ Veux-tu que je te montre un **exemple minimal** (avec un `mylib.c` + `mylib.h` + config CubeIDE) pour que tu voies comment lâ€™intÃ©grer pas Ã  pas ?
